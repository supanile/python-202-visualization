''' 1. Series '''
'''
- Series เป็นโครงสร้างข้อมูลแบบหนึ่งมิติใน Pandas ที่เก็บข้อมูลในรูปแบบลำดับ (sequence) ซึ่งคล้ายกับ list ใน Python แต่มีฟีเจอร์พิเศษเพิ่มเติม เช่น การกำหนด index ให้กับข้อมูลแต่ละรายการ
- Series สามารถเก็บข้อมูลประเภทเดียวกัน เช่น ตัวเลขทั้งหมด หรือข้อความทั้งหมด
'''
import pandas as pd

# สร้าง Series จากลิสต์ของตัวเลข
s = pd.Series([10, 20, 30, 40, 50])

print(s)

'''
ในตัวอย่างนี้ Series จะมีค่า index ตั้งแต่ 0 ถึง 4 โดยอัตโนมัติ และค่าที่เก็บใน Series คือ 10, 20, 30, 40, 50

- index: คอลัมน์ด้านซ้ายคือดัชนี (index) ซึ่งสามารถกำหนดเองได้หากต้องการ
- value: คอลัมน์ด้านขวาคือค่าที่เก็บใน Series
'''

''' การสร้าง Series โดยกำหนด index เอง: '''

# สร้าง Series พร้อมกำหนด index
s = pd.Series([10, 20, 30], index=['a', 'b', 'c'])

print(s)
''' ในตัวอย่างนี้ Series มี index เป็น 'a', 'b', 'c' แทนที่จะเป็นตัวเลขอัตโนมัติ '''

'''
เป้าหมายของการทำ Index ใน Series

1. การระบุและเข้าถึงข้อมูลได้ง่ายขึ้น Index ใน Series ทำหน้าที่เหมือนกับตัวชี้หรือตัวระบุ (identifier) ให้กับแต่ละค่าข้อมูลใน Series ดังนั้น เมื่อเราต้องการเข้าถึงข้อมูลใน Series เราสามารถใช้ index ที่กำหนดขึ้นมาเพื่อดึงข้อมูลได้โดยตรง ไม่จำเป็นต้องใช้ตำแหน่งของข้อมูลที่เป็นตัวเลขเท่านั้น
'''
import pandas as pd

# สร้าง Series พร้อมกำหนด index
s = pd.Series([10, 20, 30], index=['a', 'b', 'c'])

# เข้าถึงข้อมูลด้วย index
print(s['b'])  # ผลลัพธ์: 20

'''
2. รองรับข้อมูลที่ไม่เป็นลำดับ (Non-Sequential Data) Series ใน Pandas สามารถมี index ที่ไม่ได้เป็นเพียงตัวเลขเรียงลำดับ (sequential) เช่น 0, 1, 2 แต่สามารถเป็นค่าที่ระบุเอง เช่น ข้อความหรือวันที่ ทำให้สามารถใช้ Pandas ในการจัดการข้อมูลที่มีลำดับไม่แน่นอนหรือเป็นค่าที่มีความหมาย เช่น ชื่อ, หมวดหมู่, วันที่ เป็นต้น
'''
# Series ที่มี index เป็นวันที่
s = pd.Series([100, 200, 150], index=['2023-09-01', '2023-09-02', '2023-09-03'])

# เข้าถึงข้อมูลวันที่ 2023-09-02
print(s['2023-09-02'])  # ผลลัพธ์: 200

'''
3. การรวมข้อมูลจากหลายแหล่ง (Data Alignment) Index ช่วยในเรื่องของการรวมข้อมูลจาก Series หรือ DataFrame หลายตัว โดย Pandas จะใช้ index ในการจัดการและรวมข้อมูลได้อัตโนมัติ หาก index ของ Series สองตัวที่นำมารวมกันไม่ตรงกัน Pandas จะจัดการให้เองโดยเพิ่มข้อมูลที่หายไป (NaN)
'''
s1 = pd.Series([100, 200, 300], index=['a', 'b', 'c'])
s2 = pd.Series([150, 250], index=['a', 'b'])

# การรวมข้อมูลโดยใช้ index
combined = s1 + s2
print(combined)